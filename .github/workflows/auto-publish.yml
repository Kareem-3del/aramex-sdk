name: Auto Publish on Merge

on:
  push:
    branches:
      - master
      - main

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Get previous version (from parent commit)
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous commit"
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")

          # Restore current package.json
          git checkout HEAD -- package.json

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

  security-check:
    name: Security Check Before Publish
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high --production

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [check-version, security-check]
    if: needs.check-version.outputs.version_changed == 'true'
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ needs.check-version.outputs.new_version }}" -m "Release v${{ needs.check-version.outputs.new_version }}"
          git push origin "v${{ needs.check-version.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/github-script@v8
        with:
          script: |
            const version = '${{ needs.check-version.outputs.new_version }}';
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: `Release version ${version}`,
              draft: false,
              prerelease: false
            });

      - name: Notify on success
        if: success()
        run: |
          echo "Successfully published version ${{ needs.check-version.outputs.new_version }} to npm"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Failed to publish version ${{ needs.check-version.outputs.new_version }}"
          exit 1
